// To compile and run this program using jacc and Sun's JDK:
//
//    jacc simpleCalc.jacc
//    javac Calc.java CalcTokens.java
//    java  Calc
//     ... enter arithmetic expressions ... hit EOF to terminate
//

%package interpreter
%class     Parser
%interface Tokens
%semantic  Object : Interpreter.lexer.yylval
%get       Interpreter.lexer.token
%next      Interpreter.lexer.yylex()

%{
import syntax.*;
%}

%token LPAREN RPAREN  CONS COMMA SEMICOLON
 PLUS MINUS TIMES DEVIDE EQ LT GT AND OR
 UMINUS NOT

 ASSIGN

 IF THEN ELSE
 LET IN END
 WHILE DO
 FST SND HEAD TAIL LAMDA

 INTEGER BOOLEAN NIL SKIP FUN

 ID


%left SEMICOLON
%nonassoc DO
%nonassoc FUN
%nonassoc LOW
%nonassoc  ELSE
%left LAMDA
%right ASSIGN
%left AND OR
%left CONS
%left EQ LT GT 
%left  PLUS MINUS
%left  TIMES DEVIDE
%nonassoc UMINUS NOT

%%

prog : expr { System.out.println(((Expression)$1).eval()); };

expr : LET ID EQ expr IN  expseq END { $$ = new LetInEnd(new Variable($2),$4,$6);}
	|  expr PLUS expr { $$ = new BinaryOperation($1, BinaryOperation.BinaryOperator.plus , $3);} 
	|  expr MINUS expr { $$ = new BinaryOperation($1, BinaryOperation.BinaryOperator.minus, $3);}
	|  expr TIMES expr { $$ = new BinaryOperation($1, BinaryOperation.BinaryOperator.times, $3);}
	|  expr DEVIDE expr { $$ = new BinaryOperation($1, BinaryOperation.BinaryOperator.devide, $3);}
	|  expr GT expr { $$ = new BinaryOperation($1, BinaryOperation.BinaryOperator.biggerThan, $3);}
	|  expr LT expr { $$ = new BinaryOperation($1, BinaryOperation.BinaryOperator.lessThan, $3);}
	|  expr EQ expr { $$ = new BinaryOperation($1, BinaryOperation.BinaryOperator.equal, $3);}
	|  expr AND expr { $$ = new BinaryOperation($1, BinaryOperation.BinaryOperator.and, $3);}
	|  expr OR expr { $$ = new BinaryOperation($1, BinaryOperation.BinaryOperator.or, $3);}
	|  INTEGER {$$ = new IntValue($1); }
	|  UMINUS expr {$$ = new UnaryOperation(UnaryOperation.UnaryOperator.negative, $2);}
	|  BOOLEAN {$$ = new BoolValue($1); }
	|  NOT expr {$$ = new UnaryOperation(UnaryOperation.UnaryOperator.not, $2);}
	|  IF expr THEN expr ELSE expr END {$$ = new IfThenElse($2,$4, $6);}
	|  WHILE expr DO expr END {$$ = new WhileDoEnd($2,$4);}
	|  ID {$$ = new Variable($1); }
	|  expr CONS expr { $$ = new List($1,$3);}
	|  FUN ID LAMDA expr {$$ = new AnonymousFunction(new Variable($2), $4);}
	|  LPAREN expr expr RPAREN {$$ = new Application($2, $3);}
    ;
expseq : expr {$$=$1;}
	|    expr SEMICOLON expseq {$$ = new Sequence($1,$3);}
	;

%%

private void yyerror(String msg) {
	    String prefix = "[line:" + Interpreter.lexer.line+ " TokenID:" + Interpreter.tokenName[Lexer.token];
	    if (Lexer.token == Tokens.ID || Lexer.token == Tokens.BOOLEAN || Lexer.token == Tokens.INTEGER)
	    {
	    	prefix += " " +Lexer.yylval;
	    }
	    prefix += "]\t";
        System.out.println(prefix+msg);
        System.exit(1);
}