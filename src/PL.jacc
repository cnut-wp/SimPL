// To compile and run this program using jacc and Sun's JDK:
//
//    jacc simpleCalc.jacc
//    javac Calc.java CalcTokens.java
//    java  Calc
//     ... enter arithmetic expressions ... hit EOF to terminate
//

%class     Parser
%interface Tokens
%semantic  int : yylval
%get       token
%next      yylex()

%token '(' ')' CONS ';' ','
%token '+' '-' '*' '/' '=' '>' '<' AND OR
%token '~' NOT

%token SKIP

%token IF THEN ELSE
%token LET IN END
%token WHILE DO
%token FST SND HEAD TAIL LAMDA

%token INTEGER BOOLEAN NIL SKIP FUN

%token ID

%left  '+' '-'
%left  '*' '/'

%%
e : ID
  | v
  | '(' e e ')'
  | e bop e
  | uop e
  | LET ID '=' e IN e END
  | IF e THEN e ELSE e
  | e '=' e
  | e ';' e
  | WHILE e DO e END
  | FST e
  | SND e
  | HEAD e
  | TAIL e
  | '(' e ')'
  ;
 
v : INTEGER
  | BOOLEAN
  | NIL
  | SKIP
  | FUN ID LAMDA e
  | '(' v ',' v ')'
  | v CONS v
  ;

bop : '+'
    | '-'
	| '*'
	| '/'
	| '='
	| '>'
	| '<'
	| AND
	| OR
	| CONS
	| ','
	;

uop : '~'
    | NOT
	;

%%

  private void yyerror(String msg) {
    System.out.println("ERROR: " + msg);
    System.exit(1);
  }

  private int c;

  /** Read a single input character from standard input.
   */
  private void nextChar() {
    if (c>=0) {
      try {
        c = System.in.read();
      } catch (Exception e) {
        c = (-1);
      }
    }
  }

  int token;
  int yylval;

  /** Read the next token and return the
   *  corresponding integer code.
   */
  int yylex() {
    for (;;) {
      // Skip whitespace
      while (c==' ' || c=='\n' || c=='\t' || c=='\r') {
        nextChar();
      }
      if (c<0) {
        return (token=ENDINPUT);
      }
      switch (c) {
        case '+' : nextChar();
                   return token='+';
        case '-' : nextChar();
                   return token='-';
        case '*' : nextChar();
                   return token='*';
        case '/' : nextChar();
                   return token='/';
        case '(' : nextChar();
                   return token='(';
        case ')' : nextChar();
                   return token=')';
        case ';' : nextChar();
                   return token=';';
        default  : if (Character.isDigit((char)c)) {
                     int n = 0;
                       do {
                         n = 10*n + (c - '0');
                         nextChar();
                       } while (Character.isDigit((char)c));
                       yylval = n;
                       return token=INTEGER;
                     } else {
                       yyerror("Illegal character "+c);
                       nextChar();
                     }
      }
    }
  }

  public static void main(String[] args) {
    Calc calc = new Calc();
    calc.nextChar(); // prime the character input stream
    calc.yylex();    // prime the token input stream
    calc.parse();    // parse the input
  }
